knitr::opts_chunk$set(echo = TRUE)
vcf_file <- "chr7ESN_6000000_8000000.vcf"
# note: sometimes I find it useful to add extensions to the variable name that describes the type of object the variable is, in this case a CollapsedVCF object
vcf.CollapsedVCF <- VariantAnnotation::readVcf(vcf_file)
library(VariantAnnotation)
library(VariantAnnotation)
BiocManager::install("VariantAnnotation")
library(VariantAnnotation)
# note: sometimes I find it useful to add extensions to the variable name that describes the type of object the variable is, in this case a CollapsedVCF object
vcf.CollapsedVCF <- VariantAnnotation::readVcf(vcf_file)
View(vcf.CollapsedVCF)
# Can get the class of any object
class(vcf.CollapsedVCF)
# View a summary of the vcf.CollapsedVCF object
summary(vcf.CollapsedVCF)
# View the genomic ranges of the variants
rowRanges(vcf.CollapsedVCF)
# Access the INFO fields
info(vcf.CollapsedVCF)
# What are the dimensions Variants (rows) x Samples (columns)
dim(vcf.CollapsedVCF)
View(vcf.CollapsedVCF)
# note: get a logical vector of same length as CollapsedVCF indicated if variant is a SNP or something else
isSNV.logical <- VariantAnnotation::isSNV(vcf.CollapsedVCF)
# how many variants are SNPs? How many variants are something else?
table(isSNV.logical)
isSNV.biallelic_only.logical <- VariantAnnotation::isSNV(vcf.CollapsedVCF,singleAltOnly=TRUE)
table(isSNV.biallelic_only.logical)
# note: inside the [ ], on the left hand side of "," we provide a logical vector to select rows
#.      of the object that evaluate to TRUE. On the right of the "," we provide nothing to
#.      keep all columns. This is syntax much like base R approach to selecting rows and columns
vcf.snps_only.CollapsedVCF <- vcf.CollapsedVCF[isSNV.biallelic_only.logical, ]
print("This is the number of biallelic snps:",quote=F)
sum(isSNV.biallelic_only.logical)
print("These are the dimensions of the subsetted CollapsedVCF:",quote=F)
dim(vcf.snps_only.CollapsedVCF)
# This breaks out the different fields of the sample columns into matrices. The matrices
# are stored as named elements in the list
vcf.snps_only.SimpleList <- VariantAnnotation::geno(vcf.snps_only.CollapsedVCF)
# Review the different named list elements
names(vcf.snps_only.SimpleList)
View(vcf.snps_only.SimpleList)
#Accessing the Elements
gt_matrix <- vcf.snps_only.SimpleList$GT  # or vcf.snps_only.SimpleList[["GT"]]
View(gt_matrix)
# Check class of vcf.snps_only.geno.SimpleList[['GT']]
class(vcf.snps_only.SimpleList[['GT']])
# Check class of vcf.snps_only.geno.SimpleList[['GT']]
class(vcf.snps_only.SimpleList[['GT']])
head(vcf.snps_only.SimpleList[['GT']], n = 2)
library(tidyverse)
install.packages("rlang")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
vcf.snps_only.tbl_df <- vcf.snps_only.SimpleList[['GT']] %>%
as.data.frame(stringsAsFactors = F) %>%
rownames_to_column(var = "snp_id") %>%
as_tibble()install.packages("rlang")
install.packages("rlang")
vcf.snps_only.tbl_df <- vcf.snps_only.SimpleList[['GT']] %>%
as.data.frame(stringsAsFactors = F) %>%
rownames_to_column(var = "snp_id") %>%
as_tibble()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
vcf.snps_only.tbl_df <- vcf.snps_only.SimpleList[['GT']] %>%
as.data.frame(stringsAsFactors = F) %>%
rownames_to_column(var = "snp_id") %>%
as_tibble()
View(vcf.snps_only.tbl_df)
vcf.snps_only.tbl_df
